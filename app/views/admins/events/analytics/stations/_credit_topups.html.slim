- topups = @current_event.credit_topups(station_filter: @station)
- dates = topups.reject { |_, v| v.zero? }.keys
- credits = @current_event.credits
- cash_recon = @current_event.cash_recon(station_filter: @station).order(:date)

- if admin_or_promoter_or(:monetary_manager, :vendor_manager)
  .mdl-grid
    .mdl-layout-spacer
    .mdl-cell.mdl-cell--11-col
      .mdl-grid
        = render "admins/events/analytics/box", cols: 4,
                id: 'topups',
                custom_class: 'hovering',
                colors: ['#009688', '#66FF99'],
                icon: 'attach_money',
                title_text: "Topups",
                title_number: number_to_reports(topups.values.sum),
                subtitle: credits.map { |credit| { text: credit.name.humanize, number: number_to_reports_currency(@current_event.credit_topups_total(credit_filter: credit, station_filter: @station)) } }
        = render "admins/events/analytics/box", cols: 4,
                id: 'devices',
                custom_class: 'hovering',
                colors: ['#FF4E50', '#F9D423'],
                icon: 'attach_money',
                title_text: "Devices",
                title_number: @station.count_devices,
                subtitle: [{ text: 'Avg devices per operator', number: number_to_reports(@station.count_devices.to_f / @station.count_operators.to_f) }, { text: 'Avg topup per device', number: number_to_reports_currency(topups.values.sum / @station.count_devices) }]
        = render "admins/events/analytics/box", cols: 4,
                id: 'operators',
                custom_class: 'hovering',
                colors: ['#FF5050', '#F3A183'],
                icon: 'attach_money',
                title_text: "Operators",
                title_number: @station.count_operators,
                subtitle: [{ text: 'Avg topups', number: number_to_reports_currency(topups.values.sum / @station.count_operators.to_f) }, { text: 'Avg topups per day', number: number_to_reports_currency(topups.values.sum / @station.count_operators.to_f / dates.size) }]
    .mdl-layout-spacer

.content-grid.mdl-grid
  .mdl-layout-spacer
  .mdl-cell.mdl-cell--12-col.analytics
    .small = link_to "*Why red numbers?", '#danger-modal', style: "float: right" 

  .mdl-cell.mdl-cell--12-col.analytics
    table.pvtTable
      thead
        tr
          th.pvtColLabel.empty rowspan="2"
          - columns = credits.count + 1
          - dates.each do |date|
            th.pvtColLabel.high-contrast colspan="#{columns}" = date
          th.pvtColLabel.high-contrast colspan="#{columns}" Totals
        tr
          - dates.each do |date|
            th.pvtColLabel.low-contrast Qty
            - credits.each do |credit|
              th.pvtColLabel.low-contrast = credit.name
          th.pvtColLabel.low-contrast Qty
          - credits.each do |credit|
            th.pvtColLabel.low-contrast = credit.name

      tbody
        - @station.operators.each do |operator|
          - quantity = @current_event.count_topups(grouping: :day, station_filter: @station, operator_filter: operator)
          - data = credits.map { |credit| [credit, @current_event.credit_topups(grouping: :day, credit_filter: credit, station_filter: @station, operator_filter: operator)] }.to_h

          - next if data.map { |_, info| info.values.all?(&:zero?) }.all? && quantity.values.sum.zero?

          tr
            th.pvtRowLabel.low-contrast = link_to operator.name, [:admins, @current_event, operator, operator: operator.operator?]
            - dates.each do |date|
              td style="#{'color: #d9534f'}" = quantity[date] unless quantity[date].to_f.zero?
              - credits.each do |credit|
                td style="#{'color: #d9534f'}" = number_to_reports(data[credit][date]) unless data[credit][date].to_f.zero?

            td.totals style="#{'color: #d9534f'}"
              b = quantity.values.sum

            - credits.each do |credit|
              td.pvtTotal.rowTotal.totals style="#{'color: #d9534f'}" = number_to_reports(data[credit].values.sum)

        tr
          th.pvtRowLabel.low-contrast Totals
          - quantity = @current_event.count_topups(grouping: :day, station_filter: @station)

          - dates.each do |date|
            td.pvtTotal.rowTotal.totals = quantity[date]

            - credits.each do |credit|
              td.pvtTotal.rowTotal.totals = number_to_reports(@current_event.credit_topups(grouping: :day, credit_filter: credit, station_filter: @station)[date].to_f)

          td.pvtTotal.rowTotal.totals = quantity.values.sum

          - credits.each do |credit|
            td.pvtTotal.rowTotal.totals = number_to_reports(@current_event.credit_topups_total(credit_filter: credit, station_filter: @station))

  .mdl-layout-spacer

- if admin_or_promoter_or(:monetary_manager)
  - data = credits.map { |credit| [credit.name, @current_event.credit_topups(grouping: :hour, station_filter: @station, credit_filter: credit)] }.to_h
  - chart_data = { chart_id: "sales_flow", cols: ["Credits"], currency: "", data: @current_event.plot(data), metric: ["Credits"], decimals: 2 }
  - credit_topups = @station.pokes.top_credit_topup_amounts.as_json

  .content-grid.mdl-grid
    .mdl-cell.mdl-cell--12-col
      .mdl-grid
        - unless(chart_data[:data].empty?)
          .mdl-cell.mdl-cell--6-col
            = render 'admins/events/analytics/line_chart', chart_data: chart_data, name: "Topups per hour"

        - unless(credit_topups.empty?)
          .mdl-cell.mdl-cell--6-col
            .content-grid.mdl-grid
              .mdl-cell.mdl-cell--12-col
                .mdl-card__title.mdl-card--expand
                  .mdl-card__title-text Top 10 amounts
                canvas#top_products


  javascript:
      function gradientSector(ctx, colors) {
          var gradient = ctx.createLinearGradient(0, 200, 100, 20);
          gradient.addColorStop(0, colors[0]);
          gradient.addColorStop(1, colors[1]);
          return gradient
      }

      var data_p = #{credit_topups.to_json.html_safe};
      if(data_p.length != 0) {
        var credit_symbol = '#{ @current_event.credit.symbol }'
        var color_scale_p = [["#36D1DC", "#5B86E5"], ["#CAC531", "#F3F9A7"], ["#BC4E9C", "#F80759"], ["#00F260", "#0575E6"], ["#834D9B", "#D04ED6"], ["#11998E", "#38EF7D"], ["#4DA0B0", "#D39D38"], ["#EECDA3", "#EF629F"], ["#FC4A1A", "#F7B733"], ["#FF5F6B", "#FFC371"]];
        var product_name = data_p.map(function (e) {return e.product_name});
        var credits = data_p.map(function (e) {return e.credits});
        var ctx_products = document.getElementById("top_products").getContext('2d');
        new Chart(ctx_products, {
            type: 'doughnut',
            data: {
                labels: product_name,
                datasets: [
                    {
                        label: "Product" + credit_symbol,
                        data: credits,
                        backgroundColor: color_scale_p.map(function (colors) {return gradientSector(ctx_products, colors)}),
                        hoverBackgroundColor: color_scale_p.map(function (colors) {return gradientSector(ctx_products, colors)}),
                        hoverBorderWidth: 2,
                        hoverBorderColor: '#CCCCCC'
                    }
                ]
            },
            options: {
                legend: {
                    position: 'right'
                },
                tooltips: {
                    custom: function (tooltip) {
                        if (!tooltip) return;
                        tooltip.displayColors = false;
                    },
                    callbacks: {
                        title: function (tooltipItem, data) {
                            return [data.labels[tooltipItem[0].index]]
                        },
                        label: function (tooltipItem, data) {
                            return [
                                "Credits: " + data.datasets[0].data[tooltipItem.index] + " " + "#{@event_currency}"
                            ]
                        }
                    }
                }
            }
        });
      };